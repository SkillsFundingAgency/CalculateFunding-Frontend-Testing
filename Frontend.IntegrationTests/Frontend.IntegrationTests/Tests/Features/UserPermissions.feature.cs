// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Frontend.IntegrationTests.Tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class UserPermissionsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "UserPermissions.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "UserPermissions", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "UserPermissions")))
            {
                global::Frontend.IntegrationTests.Tests.Features.UserPermissionsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void UpdateALLPermissionsForASpecifiedUserToTrue(string userId, string fundingStreamId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Workitem",
                    "62977",
                    "62987",
                    "Driver"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update ALL Permissions for a Specified User to True", @__tags);
#line 4
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission",
                        "Granted"});
            table1.AddRow(new string[] {
                        "CanAdministerFundingStream",
                        "true"});
            table1.AddRow(new string[] {
                        "CanCreateSpecification",
                        "true"});
            table1.AddRow(new string[] {
                        "CanEditSpecification",
                        "true"});
            table1.AddRow(new string[] {
                        "CanApproveSpecification",
                        "true"});
            table1.AddRow(new string[] {
                        "CanEditCalculations",
                        "true"});
            table1.AddRow(new string[] {
                        "CanMapDatasets",
                        "true"});
            table1.AddRow(new string[] {
                        "CanChooseFunding",
                        "true"});
            table1.AddRow(new string[] {
                        "CanRefreshFunding",
                        "true"});
            table1.AddRow(new string[] {
                        "CanApproveFunding",
                        "true"});
            table1.AddRow(new string[] {
                        "CanPublishFunding",
                        "true"});
            table1.AddRow(new string[] {
                        "CanCreateQaTests",
                        "true"});
            table1.AddRow(new string[] {
                        "CanEditQaTests",
                        "true"});
#line 5
testRunner.Given(string.Format("the user \'{0}\' has the following permissions for Funding Stream \'{1}\'", userId, fundingStreamId), ((string)(null)), table1, "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update ALL Permissions for a Specified User to True: 40a8a720-2817-430e-9be1-98d3" +
            "37fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UserPermissions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Workitem")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62977")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62987")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Driver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:userId", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fundingStreamId", "PSG")]
        public virtual void UpdateALLPermissionsForASpecifiedUserToTrue_40A8A720_2817_430E_9Be1_98D337Fd01F4()
        {
#line 4
this.UpdateALLPermissionsForASpecifiedUserToTrue("40a8a720-2817-430e-9be1-98d337fd01f4", "PSG", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdateALLPermissionsForASpecifiedUserToFalse(string userId, string fundingStreamId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Workitem",
                    "62977",
                    "62987",
                    "Driver"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update ALL Permissions for a Specified User to False", @__tags);
#line 25
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission",
                        "Granted"});
            table2.AddRow(new string[] {
                        "CanAdministerFundingStream",
                        "false"});
            table2.AddRow(new string[] {
                        "CanCreateSpecification",
                        "false"});
            table2.AddRow(new string[] {
                        "CanEditSpecification",
                        "false"});
            table2.AddRow(new string[] {
                        "CanApproveSpecification",
                        "false"});
            table2.AddRow(new string[] {
                        "CanEditCalculations",
                        "false"});
            table2.AddRow(new string[] {
                        "CanMapDatasets",
                        "false"});
            table2.AddRow(new string[] {
                        "CanChooseFunding",
                        "false"});
            table2.AddRow(new string[] {
                        "CanRefreshFunding",
                        "false"});
            table2.AddRow(new string[] {
                        "CanApproveFunding",
                        "false"});
            table2.AddRow(new string[] {
                        "CanPublishFunding",
                        "false"});
            table2.AddRow(new string[] {
                        "CanCreateQaTests",
                        "false"});
            table2.AddRow(new string[] {
                        "CanEditQaTests",
                        "false"});
#line 26
testRunner.Given(string.Format("the user \'{0}\' has the following permissions for Funding Stream \'{1}\'", userId, fundingStreamId), ((string)(null)), table2, "Given ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update ALL Permissions for a Specified User to False: 40a8a720-2817-430e-9be1-98d" +
            "337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UserPermissions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Workitem")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62977")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62987")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Driver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:userId", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fundingStreamId", "PSG")]
        public virtual void UpdateALLPermissionsForASpecifiedUserToFalse_40A8A720_2817_430E_9Be1_98D337Fd01F4()
        {
#line 25
this.UpdateALLPermissionsForASpecifiedUserToFalse("40a8a720-2817-430e-9be1-98d337fd01f4", "PSG", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdatePermissionsForASpecifiedUserToEnableCreationOfANewSpecification(string userId, string fundingStreamId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Workitem",
                    "62977",
                    "62987",
                    "Driver"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Permissions for a Specified User to Enable Creation of a New Specification" +
                    "", @__tags);
#line 47
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission",
                        "Granted"});
            table3.AddRow(new string[] {
                        "CanAdministerFundingStream",
                        "true"});
            table3.AddRow(new string[] {
                        "CanCreateSpecification",
                        "true"});
            table3.AddRow(new string[] {
                        "CanEditSpecification",
                        "true"});
            table3.AddRow(new string[] {
                        "CanApproveSpecification",
                        "true"});
            table3.AddRow(new string[] {
                        "CanEditCalculations",
                        "true"});
            table3.AddRow(new string[] {
                        "CanMapDatasets",
                        "true"});
            table3.AddRow(new string[] {
                        "CanChooseFunding",
                        "true"});
            table3.AddRow(new string[] {
                        "CanRefreshFunding",
                        "true"});
            table3.AddRow(new string[] {
                        "CanApproveFunding",
                        "true"});
            table3.AddRow(new string[] {
                        "CanPublishFunding",
                        "true"});
            table3.AddRow(new string[] {
                        "CanCreateQaTests",
                        "true"});
            table3.AddRow(new string[] {
                        "CanEditQaTests",
                        "true"});
#line 48
testRunner.Given(string.Format("the user \'{0}\' has the following permissions for Funding Stream \'{1}\'", userId, fundingStreamId), ((string)(null)), table3, "Given ");
#line 63
testRunner.Then("I can successfully create a new Specification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update Permissions for a Specified User to Enable Creation of a New Specification" +
            ": 40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UserPermissions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Workitem")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62977")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62987")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Driver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:userId", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fundingStreamId", "PSG")]
        public virtual void UpdatePermissionsForASpecifiedUserToEnableCreationOfANewSpecification_40A8A720_2817_430E_9Be1_98D337Fd01F4()
        {
#line 47
this.UpdatePermissionsForASpecifiedUserToEnableCreationOfANewSpecification("40a8a720-2817-430e-9be1-98d337fd01f4", "PSG", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdatePermissionsForASpecifiedUserToEnableEditSpecification(string userId, string fundingStreamId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Workitem",
                    "62977",
                    "62987",
                    "Driver"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Permissions for a Specified User to Enable Edit Specification", @__tags);
#line 71
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission",
                        "Granted"});
            table4.AddRow(new string[] {
                        "CanAdministerFundingStream",
                        "true"});
            table4.AddRow(new string[] {
                        "CanCreateSpecification",
                        "true"});
            table4.AddRow(new string[] {
                        "CanEditSpecification",
                        "true"});
            table4.AddRow(new string[] {
                        "CanApproveSpecification",
                        "true"});
            table4.AddRow(new string[] {
                        "CanEditCalculations",
                        "true"});
            table4.AddRow(new string[] {
                        "CanMapDatasets",
                        "true"});
            table4.AddRow(new string[] {
                        "CanChooseFunding",
                        "true"});
            table4.AddRow(new string[] {
                        "CanRefreshFunding",
                        "true"});
            table4.AddRow(new string[] {
                        "CanApproveFunding",
                        "true"});
            table4.AddRow(new string[] {
                        "CanPublishFunding",
                        "true"});
            table4.AddRow(new string[] {
                        "CanCreateQaTests",
                        "true"});
            table4.AddRow(new string[] {
                        "CanEditQaTests",
                        "true"});
#line 72
testRunner.Given(string.Format("the user \'{0}\' has the following permissions for Funding Stream \'{1}\'", userId, fundingStreamId), ((string)(null)), table4, "Given ");
#line 87
testRunner.And("I have Navigated to the Edit Specifiction Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
testRunner.When("I update the Specification Name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 89
testRunner.And("click the Update Specification Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 90
testRunner.Then("I am redirected back to the Manage Polices Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 91
testRunner.And("the Specification is correctly updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update Permissions for a Specified User to Enable Edit Specification: 40a8a720-28" +
            "17-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UserPermissions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Workitem")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62977")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62987")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Driver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:userId", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fundingStreamId", "PSG")]
        public virtual void UpdatePermissionsForASpecifiedUserToEnableEditSpecification_40A8A720_2817_430E_9Be1_98D337Fd01F4()
        {
#line 71
this.UpdatePermissionsForASpecifiedUserToEnableEditSpecification("40a8a720-2817-430e-9be1-98d337fd01f4", "PSG", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdatePermissionsForASpecifiedUserToEnableCreateDatasetAccess(string userId, string fundingStreamId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Workitem",
                    "62977",
                    "62987",
                    "Driver"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Permissions for a Specified User to Enable Create Dataset Access", @__tags);
#line 99
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission",
                        "Granted"});
            table5.AddRow(new string[] {
                        "CanAdministerFundingStream",
                        "true"});
            table5.AddRow(new string[] {
                        "CanCreateSpecification",
                        "true"});
            table5.AddRow(new string[] {
                        "CanEditSpecification",
                        "true"});
            table5.AddRow(new string[] {
                        "CanApproveSpecification",
                        "true"});
            table5.AddRow(new string[] {
                        "CanEditCalculations",
                        "true"});
            table5.AddRow(new string[] {
                        "CanMapDatasets",
                        "true"});
            table5.AddRow(new string[] {
                        "CanChooseFunding",
                        "true"});
            table5.AddRow(new string[] {
                        "CanRefreshFunding",
                        "true"});
            table5.AddRow(new string[] {
                        "CanApproveFunding",
                        "true"});
            table5.AddRow(new string[] {
                        "CanPublishFunding",
                        "true"});
            table5.AddRow(new string[] {
                        "CanCreateQaTests",
                        "true"});
            table5.AddRow(new string[] {
                        "CanEditQaTests",
                        "true"});
#line 100
testRunner.Given(string.Format("the user \'{0}\' has the following permissions for Funding Stream \'{1}\'", userId, fundingStreamId), ((string)(null)), table5, "Given ");
#line 115
testRunner.Then("I can successfully navigate to the Create Dataset page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update Permissions for a Specified User to Enable Create Dataset Access: 40a8a720" +
            "-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UserPermissions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Workitem")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62977")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62987")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Driver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:userId", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fundingStreamId", "PSG")]
        public virtual void UpdatePermissionsForASpecifiedUserToEnableCreateDatasetAccess_40A8A720_2817_430E_9Be1_98D337Fd01F4()
        {
#line 99
this.UpdatePermissionsForASpecifiedUserToEnableCreateDatasetAccess("40a8a720-2817-430e-9be1-98d337fd01f4", "PSG", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdatePermissionsForASpecifiedUserToEnableCreateSpecificationPolicyAccess(string userId, string fundingStreamId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Workitem",
                    "62977",
                    "62987",
                    "Driver"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Permissions for a Specified User to Enable Create Specification Policy Acc" +
                    "ess", @__tags);
#line 122
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission",
                        "Granted"});
            table6.AddRow(new string[] {
                        "CanAdministerFundingStream",
                        "true"});
            table6.AddRow(new string[] {
                        "CanCreateSpecification",
                        "true"});
            table6.AddRow(new string[] {
                        "CanEditSpecification",
                        "true"});
            table6.AddRow(new string[] {
                        "CanApproveSpecification",
                        "true"});
            table6.AddRow(new string[] {
                        "CanEditCalculations",
                        "true"});
            table6.AddRow(new string[] {
                        "CanMapDatasets",
                        "true"});
            table6.AddRow(new string[] {
                        "CanChooseFunding",
                        "true"});
            table6.AddRow(new string[] {
                        "CanRefreshFunding",
                        "true"});
            table6.AddRow(new string[] {
                        "CanApproveFunding",
                        "true"});
            table6.AddRow(new string[] {
                        "CanPublishFunding",
                        "true"});
            table6.AddRow(new string[] {
                        "CanCreateQaTests",
                        "true"});
            table6.AddRow(new string[] {
                        "CanEditQaTests",
                        "true"});
#line 123
testRunner.Given(string.Format("the user \'{0}\' has the following permissions for Funding Stream \'{1}\'", userId, fundingStreamId), ((string)(null)), table6, "Given ");
#line 138
testRunner.Then("I can successfully navigate to the Create Policy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update Permissions for a Specified User to Enable Create Specification Policy Acc" +
            "ess: 40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UserPermissions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Workitem")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62977")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62987")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Driver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:userId", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fundingStreamId", "PSG")]
        public virtual void UpdatePermissionsForASpecifiedUserToEnableCreateSpecificationPolicyAccess_40A8A720_2817_430E_9Be1_98D337Fd01F4()
        {
#line 122
this.UpdatePermissionsForASpecifiedUserToEnableCreateSpecificationPolicyAccess("40a8a720-2817-430e-9be1-98d337fd01f4", "PSG", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdatePermissionsForASpecifiedUserToEnableCreateCalculationSpecificationAccess(string userId, string fundingStreamId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Workitem",
                    "62977",
                    "62987",
                    "Driver"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Permissions for a Specified User to Enable Create Calculation Specificatio" +
                    "n Access", @__tags);
#line 145
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission",
                        "Granted"});
            table7.AddRow(new string[] {
                        "CanAdministerFundingStream",
                        "true"});
            table7.AddRow(new string[] {
                        "CanCreateSpecification",
                        "true"});
            table7.AddRow(new string[] {
                        "CanEditSpecification",
                        "true"});
            table7.AddRow(new string[] {
                        "CanApproveSpecification",
                        "true"});
            table7.AddRow(new string[] {
                        "CanEditCalculations",
                        "true"});
            table7.AddRow(new string[] {
                        "CanMapDatasets",
                        "true"});
            table7.AddRow(new string[] {
                        "CanChooseFunding",
                        "true"});
            table7.AddRow(new string[] {
                        "CanRefreshFunding",
                        "true"});
            table7.AddRow(new string[] {
                        "CanApproveFunding",
                        "true"});
            table7.AddRow(new string[] {
                        "CanPublishFunding",
                        "true"});
            table7.AddRow(new string[] {
                        "CanCreateQaTests",
                        "true"});
            table7.AddRow(new string[] {
                        "CanEditQaTests",
                        "true"});
#line 146
testRunner.Given(string.Format("the user \'{0}\' has the following permissions for Funding Stream \'{1}\'", userId, fundingStreamId), ((string)(null)), table7, "Given ");
#line 161
testRunner.Then("I can successfully navigate to the Create Calculation Specificaton page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update Permissions for a Specified User to Enable Create Calculation Specificatio" +
            "n Access: 40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UserPermissions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Workitem")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62977")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62987")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Driver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:userId", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fundingStreamId", "PSG")]
        public virtual void UpdatePermissionsForASpecifiedUserToEnableCreateCalculationSpecificationAccess_40A8A720_2817_430E_9Be1_98D337Fd01F4()
        {
#line 145
this.UpdatePermissionsForASpecifiedUserToEnableCreateCalculationSpecificationAccess("40a8a720-2817-430e-9be1-98d337fd01f4", "PSG", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdatePermissionsForASpecifiedUserToEnableCreateSubPolicyAccess(string userId, string fundingStreamId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Workitem",
                    "62977",
                    "62987",
                    "Driver"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Permissions for a Specified User to Enable Create Sub Policy Access", @__tags);
#line 168
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission",
                        "Granted"});
            table8.AddRow(new string[] {
                        "CanAdministerFundingStream",
                        "true"});
            table8.AddRow(new string[] {
                        "CanCreateSpecification",
                        "true"});
            table8.AddRow(new string[] {
                        "CanEditSpecification",
                        "true"});
            table8.AddRow(new string[] {
                        "CanApproveSpecification",
                        "true"});
            table8.AddRow(new string[] {
                        "CanEditCalculations",
                        "true"});
            table8.AddRow(new string[] {
                        "CanMapDatasets",
                        "true"});
            table8.AddRow(new string[] {
                        "CanChooseFunding",
                        "true"});
            table8.AddRow(new string[] {
                        "CanRefreshFunding",
                        "true"});
            table8.AddRow(new string[] {
                        "CanApproveFunding",
                        "true"});
            table8.AddRow(new string[] {
                        "CanPublishFunding",
                        "true"});
            table8.AddRow(new string[] {
                        "CanCreateQaTests",
                        "true"});
            table8.AddRow(new string[] {
                        "CanEditQaTests",
                        "true"});
#line 169
testRunner.Given(string.Format("the user \'{0}\' has the following permissions for Funding Stream \'{1}\'", userId, fundingStreamId), ((string)(null)), table8, "Given ");
#line 184
testRunner.Then("I can successfully navigate to the Create Sub Policy page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update Permissions for a Specified User to Enable Create Sub Policy Access: 40a8a" +
            "720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UserPermissions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Workitem")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62977")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62987")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Driver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:userId", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fundingStreamId", "PSG")]
        public virtual void UpdatePermissionsForASpecifiedUserToEnableCreateSubPolicyAccess_40A8A720_2817_430E_9Be1_98D337Fd01F4()
        {
#line 168
this.UpdatePermissionsForASpecifiedUserToEnableCreateSubPolicyAccess("40a8a720-2817-430e-9be1-98d337fd01f4", "PSG", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdatePermissionsForASpecifiedUserToEnableSpecificationApprovalAccess(string userId, string fundingStreamId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Workitem",
                    "62977",
                    "62987",
                    "Driver"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Permissions for a Specified User to Enable Specification Approval Access", @__tags);
#line 191
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission",
                        "Granted"});
            table9.AddRow(new string[] {
                        "CanAdministerFundingStream",
                        "true"});
            table9.AddRow(new string[] {
                        "CanCreateSpecification",
                        "true"});
            table9.AddRow(new string[] {
                        "CanEditSpecification",
                        "true"});
            table9.AddRow(new string[] {
                        "CanApproveSpecification",
                        "true"});
            table9.AddRow(new string[] {
                        "CanEditCalculations",
                        "true"});
            table9.AddRow(new string[] {
                        "CanMapDatasets",
                        "true"});
            table9.AddRow(new string[] {
                        "CanChooseFunding",
                        "true"});
            table9.AddRow(new string[] {
                        "CanRefreshFunding",
                        "true"});
            table9.AddRow(new string[] {
                        "CanApproveFunding",
                        "true"});
            table9.AddRow(new string[] {
                        "CanPublishFunding",
                        "true"});
            table9.AddRow(new string[] {
                        "CanCreateQaTests",
                        "true"});
            table9.AddRow(new string[] {
                        "CanEditQaTests",
                        "true"});
#line 192
testRunner.Given(string.Format("the user \'{0}\' has the following permissions for Funding Stream \'{1}\'", userId, fundingStreamId), ((string)(null)), table9, "Given ");
#line 207
testRunner.And("A Policy has been previously created with a Unique Policy Name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 208
testRunner.When("I choose to mark the associated Specification as Approved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 209
testRunner.Then("the Specification should be marked as approved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update Permissions for a Specified User to Enable Specification Approval Access: " +
            "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UserPermissions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Workitem")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62977")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62987")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Driver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:userId", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fundingStreamId", "PSG")]
        public virtual void UpdatePermissionsForASpecifiedUserToEnableSpecificationApprovalAccess_40A8A720_2817_430E_9Be1_98D337Fd01F4()
        {
#line 191
this.UpdatePermissionsForASpecifiedUserToEnableSpecificationApprovalAccess("40a8a720-2817-430e-9be1-98d337fd01f4", "PSG", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdatePermissionsForASpecifiedUserToAllowAccessToEditACalculation(string userId, string fundingStreamId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Workitem",
                    "62977",
                    "62987",
                    "Driver"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Permissions for a Specified User to allow access to Edit a Calculation", @__tags);
#line 216
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission",
                        "Granted"});
            table10.AddRow(new string[] {
                        "CanAdministerFundingStream",
                        "true"});
            table10.AddRow(new string[] {
                        "CanCreateSpecification",
                        "true"});
            table10.AddRow(new string[] {
                        "CanEditSpecification",
                        "true"});
            table10.AddRow(new string[] {
                        "CanApproveSpecification",
                        "true"});
            table10.AddRow(new string[] {
                        "CanEditCalculations",
                        "true"});
            table10.AddRow(new string[] {
                        "CanMapDatasets",
                        "true"});
            table10.AddRow(new string[] {
                        "CanChooseFunding",
                        "true"});
            table10.AddRow(new string[] {
                        "CanRefreshFunding",
                        "true"});
            table10.AddRow(new string[] {
                        "CanApproveFunding",
                        "true"});
            table10.AddRow(new string[] {
                        "CanPublishFunding",
                        "true"});
            table10.AddRow(new string[] {
                        "CanCreateQaTests",
                        "true"});
            table10.AddRow(new string[] {
                        "CanEditQaTests",
                        "true"});
#line 217
testRunner.Given(string.Format("the user \'{0}\' has the following permissions for Funding Stream \'{1}\'", userId, fundingStreamId), ((string)(null)), table10, "Given ");
#line 232
testRunner.And("I have navigated to the Manage Calculations page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 233
testRunner.And("I click on a calculation in the displayed list", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 234
testRunner.When("The Edit Calculation screen is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 235
testRunner.Then("The Name of the specification is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update Permissions for a Specified User to allow access to Edit a Calculation: 40" +
            "a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UserPermissions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Workitem")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62977")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62987")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Driver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:userId", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fundingStreamId", "PSG")]
        public virtual void UpdatePermissionsForASpecifiedUserToAllowAccessToEditACalculation_40A8A720_2817_430E_9Be1_98D337Fd01F4()
        {
#line 216
this.UpdatePermissionsForASpecifiedUserToAllowAccessToEditACalculation("40a8a720-2817-430e-9be1-98d337fd01f4", "PSG", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdatePermissionsForASpecifiedUserToAllowAccessToSelectDataSourcePage(string userId, string fundingStreamId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Workitem",
                    "62977",
                    "62987",
                    "Driver"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Permissions for a Specified User to allow access to Select data source pag" +
                    "e", @__tags);
#line 242
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission",
                        "Granted"});
            table11.AddRow(new string[] {
                        "CanAdministerFundingStream",
                        "true"});
            table11.AddRow(new string[] {
                        "CanCreateSpecification",
                        "true"});
            table11.AddRow(new string[] {
                        "CanEditSpecification",
                        "true"});
            table11.AddRow(new string[] {
                        "CanApproveSpecification",
                        "true"});
            table11.AddRow(new string[] {
                        "CanEditCalculations",
                        "true"});
            table11.AddRow(new string[] {
                        "CanMapDatasets",
                        "true"});
            table11.AddRow(new string[] {
                        "CanChooseFunding",
                        "true"});
            table11.AddRow(new string[] {
                        "CanRefreshFunding",
                        "true"});
            table11.AddRow(new string[] {
                        "CanApproveFunding",
                        "true"});
            table11.AddRow(new string[] {
                        "CanPublishFunding",
                        "true"});
            table11.AddRow(new string[] {
                        "CanCreateQaTests",
                        "true"});
            table11.AddRow(new string[] {
                        "CanEditQaTests",
                        "true"});
#line 243
testRunner.Given(string.Format("the user \'{0}\' has the following permissions for Funding Stream \'{1}\'", userId, fundingStreamId), ((string)(null)), table11, "Given ");
#line 258
testRunner.And("I have already created a Specification with the appropruiate dataset & schema ass" +
                    "ociated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 259
testRunner.And("I have navigated to a specification data relationships page where dataset relatio" +
                    "nships exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 260
testRunner.When("the data set data schema relationship does have a data source associated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 261
testRunner.Then("the name of the data source is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 262
testRunner.And("the version of the data source is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 263
testRunner.And("an option to change the data source is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update Permissions for a Specified User to allow access to Select data source pag" +
            "e: 40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UserPermissions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Workitem")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62977")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62987")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Driver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:userId", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fundingStreamId", "PSG")]
        public virtual void UpdatePermissionsForASpecifiedUserToAllowAccessToSelectDataSourcePage_40A8A720_2817_430E_9Be1_98D337Fd01F4()
        {
#line 242
this.UpdatePermissionsForASpecifiedUserToAllowAccessToSelectDataSourcePage("40a8a720-2817-430e-9be1-98d337fd01f4", "PSG", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdatePermissionsForASpecifiedUserToAllowAccessToCreateAQATest(string userId, string fundingStreamId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Workitem",
                    "62977",
                    "62987",
                    "Driver"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Permissions for a Specified User to allow access to Create a QA Test", @__tags);
#line 270
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission",
                        "Granted"});
            table12.AddRow(new string[] {
                        "CanAdministerFundingStream",
                        "true"});
            table12.AddRow(new string[] {
                        "CanCreateSpecification",
                        "true"});
            table12.AddRow(new string[] {
                        "CanEditSpecification",
                        "true"});
            table12.AddRow(new string[] {
                        "CanApproveSpecification",
                        "true"});
            table12.AddRow(new string[] {
                        "CanEditCalculations",
                        "true"});
            table12.AddRow(new string[] {
                        "CanMapDatasets",
                        "true"});
            table12.AddRow(new string[] {
                        "CanChooseFunding",
                        "true"});
            table12.AddRow(new string[] {
                        "CanRefreshFunding",
                        "true"});
            table12.AddRow(new string[] {
                        "CanApproveFunding",
                        "true"});
            table12.AddRow(new string[] {
                        "CanPublishFunding",
                        "true"});
            table12.AddRow(new string[] {
                        "CanCreateQaTests",
                        "true"});
            table12.AddRow(new string[] {
                        "CanEditQaTests",
                        "true"});
#line 271
testRunner.Given(string.Format("the user \'{0}\' has the following permissions for Funding Stream \'{1}\'", userId, fundingStreamId), ((string)(null)), table12, "Given ");
#line 286
testRunner.And("I have previously created a new specification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 287
testRunner.And("I have created a New Policy for that Specification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 288
testRunner.And("I have created a New Calculation Specification for that Specification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 289
testRunner.And("I have create a New Dataset for that Specificaton", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 290
testRunner.When("I have specified a data Source Relationship for the Specification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 291
testRunner.And("I have created a Test for the Specified Specification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 292
testRunner.Then("I am notified my test scenario has validated successfully", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 293
testRunner.When("I click the Enabled Save Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 294
testRunner.Then("I am redirected to the Edit quality assurance test page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update Permissions for a Specified User to allow access to Create a QA Test: 40a8" +
            "a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UserPermissions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Workitem")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62977")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62987")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Driver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:userId", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fundingStreamId", "PSG")]
        public virtual void UpdatePermissionsForASpecifiedUserToAllowAccessToCreateAQATest_40A8A720_2817_430E_9Be1_98D337Fd01F4()
        {
#line 270
this.UpdatePermissionsForASpecifiedUserToAllowAccessToCreateAQATest("40a8a720-2817-430e-9be1-98d337fd01f4", "PSG", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdatePermissionsForASpecifiedUserToAllowAccessToEditAQATest(string userId, string fundingStreamId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Workitem",
                    "62977",
                    "62987",
                    "Driver"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Permissions for a Specified User to allow access to Edit a QA Test", @__tags);
#line 301
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission",
                        "Granted"});
            table13.AddRow(new string[] {
                        "CanAdministerFundingStream",
                        "true"});
            table13.AddRow(new string[] {
                        "CanCreateSpecification",
                        "true"});
            table13.AddRow(new string[] {
                        "CanEditSpecification",
                        "true"});
            table13.AddRow(new string[] {
                        "CanApproveSpecification",
                        "true"});
            table13.AddRow(new string[] {
                        "CanEditCalculations",
                        "true"});
            table13.AddRow(new string[] {
                        "CanMapDatasets",
                        "true"});
            table13.AddRow(new string[] {
                        "CanChooseFunding",
                        "true"});
            table13.AddRow(new string[] {
                        "CanRefreshFunding",
                        "true"});
            table13.AddRow(new string[] {
                        "CanApproveFunding",
                        "true"});
            table13.AddRow(new string[] {
                        "CanPublishFunding",
                        "true"});
            table13.AddRow(new string[] {
                        "CanCreateQaTests",
                        "true"});
            table13.AddRow(new string[] {
                        "CanEditQaTests",
                        "true"});
#line 302
testRunner.Given(string.Format("the user \'{0}\' has the following permissions for Funding Stream \'{1}\'", userId, fundingStreamId), ((string)(null)), table13, "Given ");
#line 317
testRunner.And("I have successfully navigated to the Edit quality assurance test page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 318
testRunner.When("I update the existing Test Name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 319
testRunner.And("select to Save the change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 320
testRunner.Then("the Test Name is updated", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 321
testRunner.And("I am presented with confirmation of the change", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update Permissions for a Specified User to allow access to Edit a QA Test: 40a8a7" +
            "20-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UserPermissions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Workitem")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62977")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62987")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Driver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:userId", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fundingStreamId", "PSG")]
        public virtual void UpdatePermissionsForASpecifiedUserToAllowAccessToEditAQATest_40A8A720_2817_430E_9Be1_98D337Fd01F4()
        {
#line 301
this.UpdatePermissionsForASpecifiedUserToAllowAccessToEditAQATest("40a8a720-2817-430e-9be1-98d337fd01f4", "PSG", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdatePermissionsForASpecifiedUserToAllowAccessToRefreshFunding(string userId, string fundingStreamId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Workitem",
                    "62977",
                    "62987",
                    "Driver"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Permissions for a Specified User to allow access to Refresh Funding", @__tags);
#line 329
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission",
                        "Granted"});
            table14.AddRow(new string[] {
                        "CanAdministerFundingStream",
                        "true"});
            table14.AddRow(new string[] {
                        "CanCreateSpecification",
                        "true"});
            table14.AddRow(new string[] {
                        "CanEditSpecification",
                        "true"});
            table14.AddRow(new string[] {
                        "CanApproveSpecification",
                        "true"});
            table14.AddRow(new string[] {
                        "CanEditCalculations",
                        "true"});
            table14.AddRow(new string[] {
                        "CanMapDatasets",
                        "true"});
            table14.AddRow(new string[] {
                        "CanChooseFunding",
                        "true"});
            table14.AddRow(new string[] {
                        "CanRefreshFunding",
                        "true"});
            table14.AddRow(new string[] {
                        "CanApproveFunding",
                        "true"});
            table14.AddRow(new string[] {
                        "CanPublishFunding",
                        "true"});
            table14.AddRow(new string[] {
                        "CanCreateQaTests",
                        "true"});
            table14.AddRow(new string[] {
                        "CanEditQaTests",
                        "true"});
#line 330
testRunner.Given(string.Format("the user \'{0}\' has the following permissions for Funding Stream \'{1}\'", userId, fundingStreamId), ((string)(null)), table14, "Given ");
#line 345
testRunner.And("I have navigated to the Approve and publish funding Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 346
testRunner.When("I click the Refresh Funding Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 347
testRunner.Then("the approve and Published page refreshes the funding for all providers based on a" +
                    "ny Calculation or data changes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 348
testRunner.And("a Validation Update message is displayed correctly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update Permissions for a Specified User to allow access to Refresh Funding: 40a8a" +
            "720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UserPermissions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Workitem")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62977")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62987")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Driver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:userId", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fundingStreamId", "PSG")]
        public virtual void UpdatePermissionsForASpecifiedUserToAllowAccessToRefreshFunding_40A8A720_2817_430E_9Be1_98D337Fd01F4()
        {
#line 329
this.UpdatePermissionsForASpecifiedUserToAllowAccessToRefreshFunding("40a8a720-2817-430e-9be1-98d337fd01f4", "PSG", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdatePermissionsForASpecifiedUserToAllowAccessToApproveFundingStream(string userId, string fundingStreamId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Workitem",
                    "62977",
                    "62987",
                    "Driver"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Permissions for a Specified User to allow access to Approve Funding Stream" +
                    "", @__tags);
#line 356
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission",
                        "Granted"});
            table15.AddRow(new string[] {
                        "CanAdministerFundingStream",
                        "true"});
            table15.AddRow(new string[] {
                        "CanCreateSpecification",
                        "true"});
            table15.AddRow(new string[] {
                        "CanEditSpecification",
                        "true"});
            table15.AddRow(new string[] {
                        "CanApproveSpecification",
                        "true"});
            table15.AddRow(new string[] {
                        "CanEditCalculations",
                        "true"});
            table15.AddRow(new string[] {
                        "CanMapDatasets",
                        "true"});
            table15.AddRow(new string[] {
                        "CanChooseFunding",
                        "true"});
            table15.AddRow(new string[] {
                        "CanRefreshFunding",
                        "true"});
            table15.AddRow(new string[] {
                        "CanApproveFunding",
                        "true"});
            table15.AddRow(new string[] {
                        "CanPublishFunding",
                        "true"});
            table15.AddRow(new string[] {
                        "CanCreateQaTests",
                        "true"});
            table15.AddRow(new string[] {
                        "CanEditQaTests",
                        "true"});
#line 357
testRunner.Given(string.Format("the user \'{0}\' has the following permissions for Funding Stream \'{1}\'", userId, fundingStreamId), ((string)(null)), table15, "Given ");
#line 372
testRunner.And("I have navigated to the Approve and publish funding Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 373
testRunner.Then("the Provider list updates to display all the provider information for the selecte" +
                    "d specification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 374
testRunner.When("I Choose a Provider with a status of Held", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 375
testRunner.Then("the Approve Button becomes enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update Permissions for a Specified User to allow access to Approve Funding Stream" +
            ": 40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UserPermissions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Workitem")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62977")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62987")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Driver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:userId", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fundingStreamId", "PSG")]
        public virtual void UpdatePermissionsForASpecifiedUserToAllowAccessToApproveFundingStream_40A8A720_2817_430E_9Be1_98D337Fd01F4()
        {
#line 356
this.UpdatePermissionsForASpecifiedUserToAllowAccessToApproveFundingStream("40a8a720-2817-430e-9be1-98d337fd01f4", "PSG", ((string[])(null)));
#line hidden
        }
        
        public virtual void UpdatePermissionsForASpecifiedUserToAllowAccessToPublishFundingStream(string userId, string fundingStreamId, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Workitem",
                    "62977",
                    "62987",
                    "Driver"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Update Permissions for a Specified User to allow access to Publish Funding Stream" +
                    "", @__tags);
#line 383
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "Permission",
                        "Granted"});
            table16.AddRow(new string[] {
                        "CanAdministerFundingStream",
                        "true"});
            table16.AddRow(new string[] {
                        "CanCreateSpecification",
                        "true"});
            table16.AddRow(new string[] {
                        "CanEditSpecification",
                        "true"});
            table16.AddRow(new string[] {
                        "CanApproveSpecification",
                        "true"});
            table16.AddRow(new string[] {
                        "CanEditCalculations",
                        "true"});
            table16.AddRow(new string[] {
                        "CanMapDatasets",
                        "true"});
            table16.AddRow(new string[] {
                        "CanChooseFunding",
                        "true"});
            table16.AddRow(new string[] {
                        "CanRefreshFunding",
                        "true"});
            table16.AddRow(new string[] {
                        "CanApproveFunding",
                        "true"});
            table16.AddRow(new string[] {
                        "CanPublishFunding",
                        "true"});
            table16.AddRow(new string[] {
                        "CanCreateQaTests",
                        "true"});
            table16.AddRow(new string[] {
                        "CanEditQaTests",
                        "true"});
#line 384
testRunner.Given(string.Format("the user \'{0}\' has the following permissions for Funding Stream \'{1}\'", userId, fundingStreamId), ((string)(null)), table16, "Given ");
#line 399
testRunner.And("I have navigated to the Approve and publish funding Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 400
testRunner.Then("the Provider list updates to display all the provider information for the selecte" +
                    "d specification", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 401
testRunner.When("I Choose a Provider with a status of Approved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 402
testRunner.Then("the Publish Button becomes enabled", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Update Permissions for a Specified User to allow access to Publish Funding Stream" +
            ": 40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "UserPermissions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Workitem")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62977")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("62987")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Driver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:userId", "40a8a720-2817-430e-9be1-98d337fd01f4")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:fundingStreamId", "PSG")]
        public virtual void UpdatePermissionsForASpecifiedUserToAllowAccessToPublishFundingStream_40A8A720_2817_430E_9Be1_98D337Fd01F4()
        {
#line 383
this.UpdatePermissionsForASpecifiedUserToAllowAccessToPublishFundingStream("40a8a720-2817-430e-9be1-98d337fd01f4", "PSG", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
